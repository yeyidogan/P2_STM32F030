<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ct_start.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ct_start.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sun Feb 05 20:37:23 2017
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; os_svcKernelInitialize &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[59]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">DMA1_Channel2_3_IRQHandler</a> from uart.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">DMA1_Channel4_5_IRQHandler</a> from uart.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[10]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">EXTI4_15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from i2c.o(i.I2C1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1f]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from irq_cm0.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from irq_cm0.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from irq_cm0.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[1a]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">TIM6_DAC_IRQHandler</a> from timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[23]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[37]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.os_svcThreadNew)
 <LI><a href="#[28]">os_EventFlagsPostProcess</a> from rtx_evflags.o(.text.os_EventFlagsPostProcess) referenced from rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[28]">os_EventFlagsPostProcess</a> from rtx_evflags.o(.text.os_EventFlagsPostProcess) referenced from rtx_evflags.o(.text.os_svcEventFlagsNew)
 <LI><a href="#[36]">os_IdleThread</a> from rtx_config.o(i.os_IdleThread) referenced from rtx_kernel.o(.text.os_svcKernelInitialize)
 <LI><a href="#[38]">os_ThreadPostProcess</a> from rtx_thread.o(.text.os_ThreadPostProcess) referenced from rtx_thread.o(.text.os_svcThreadNew)
 <LI><a href="#[26]">os_svcDelay</a> from rtx_delay.o(.text.os_svcDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[27]">os_svcEventFlagsNew</a> from rtx_evflags.o(.text.os_svcEventFlagsNew) referenced from rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[29]">os_svcEventFlagsSet</a> from rtx_evflags.o(.text.os_svcEventFlagsSet) referenced from rtx_evflags.o(.text.osEventFlagsSet)
 <LI><a href="#[2a]">os_svcEventFlagsWait</a> from rtx_evflags.o(.text.os_svcEventFlagsWait) referenced from rtx_evflags.o(.text.osEventFlagsWait)
 <LI><a href="#[2b]">os_svcKernelGetState</a> from rtx_kernel.o(.text.os_svcKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[2c]">os_svcKernelInitialize</a> from rtx_kernel.o(.text.os_svcKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[2d]">os_svcKernelStart</a> from rtx_kernel.o(.text.os_svcKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[2e]">os_svcMessageQueuePut</a> from rtx_msgqueue.o(.text.os_svcMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[2f]">os_svcMutexAcquire</a> from rtx_mutex.o(.text.os_svcMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[30]">os_svcMutexNew</a> from rtx_mutex.o(.text.os_svcMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[31]">os_svcMutexRelease</a> from rtx_mutex.o(.text.os_svcMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[32]">os_svcThreadExit</a> from rtx_thread.o(.text.os_svcThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[33]">os_svcThreadGetId</a> from rtx_thread.o(.text.os_svcThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[34]">os_svcThreadNew</a> from rtx_thread.o(.text.os_svcThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[35]">os_svcThreadSetPriority</a> from rtx_thread.o(.text.os_svcThreadSetPriority) referenced from rtx_thread.o(.text.osThreadSetPriority)
 <LI><a href="#[3d]">rwDummyFunc</a> from modbus_func.o(i.rwDummyFunc) referenced 4 times from modbus_func.o(.constdata)
 <LI><a href="#[3a]">task_HDC1080</a> from hdc1080.o(i.task_HDC1080) referenced from main.o(i.main)
 <LI><a href="#[39]">task_Led</a> from main.o(i.task_Led) referenced from main.o(i.main)
 <LI><a href="#[3c]">task_StepperMotor</a> from stepper_motor.o(i.task_StepperMotor) referenced from main.o(i.main)
 <LI><a href="#[3b]">task_Uart1</a> from uart.o(i.task_Uart1) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[41]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[bd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[be]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[da]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[42]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; os_svcKernelInitialize &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[46]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; initUart2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[dc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, irq_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; os_PendSV_Handler &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; os_Tick_Handler &rArr; os_TimerTick &rArr; osMessageQueuePut &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[de]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[55]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[e0]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelInitialize
</UL>

<P><STRONG><a name="[57]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_SysTimerSetup
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_HDC1080
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Uart1
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_StepperMotor
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Led
</UL>

<P><STRONG><a name="[5c]"></a>osEventFlagsNew</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osEventFlagsNew &rArr; os_MemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>osEventFlagsSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_evflags.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osEventFlagsSet &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_PostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>osEventFlagsWait</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osEventFlagsWait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Uart1
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_StepperMotor
</UL>

<P><STRONG><a name="[a2]"></a>osKernelGetState</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelInitialize &rArr; os_svcKernelInitialize &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[a3]"></a>osKernelStart</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>osMessageQueuePut</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMessageQueuePut &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_PostProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_TimerTick
</UL>

<P><STRONG><a name="[b3]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_HDC1080_configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_HDC1080
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[63]"></a>osMutexNew</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osMutexNew &rArr; os_MemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_HDC1080_configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_HDC1080
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[37]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 20 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.os_svcThreadNew)
</UL>
<P><STRONG><a name="[b0]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[64]"></a>osThreadNew</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadNew &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>osThreadSetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadSetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[28]"></a>os_EventFlagsPostProcess</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rtx_evflags.o(.text.os_EventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_EventFlagsPostProcess &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListRemove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
<LI> rtx_evflags.o(.text.os_svcEventFlagsNew)
</UL>
<P><STRONG><a name="[5e]"></a>os_MemoryAlloc</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, rtx_memory.o(.text.os_MemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = os_MemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexNew
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsNew
</UL>

<P><STRONG><a name="[7b]"></a>os_MemoryFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_memory.o(.text.os_MemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_MemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadExit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
</UL>

<P><STRONG><a name="[76]"></a>os_MemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.os_MemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_MemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelInitialize
</UL>

<P><STRONG><a name="[5d]"></a>os_MemoryPoolAlloc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_mempool.o(.text.os_MemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_MemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexNew
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsNew
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[7c]"></a>os_MemoryPoolFree</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_mempool.o(.text.os_MemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_MemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadExit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
</UL>

<P><STRONG><a name="[77]"></a>os_MemoryPoolInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.os_MemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_MemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelInitialize
</UL>

<P><STRONG><a name="[67]"></a>os_MutexOwnerRelease</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_mutex.o(.text.os_MutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = os_MutexOwnerRelease &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadExit
</UL>

<P><STRONG><a name="[4f]"></a>os_PendSV_Handler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rtx_system.o(.text.os_PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_PendSV_Handler &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[60]"></a>os_PostProcess</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_system.o(.text.os_PostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[70]"></a>os_SysTimerAckIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.os_SysTimerAckIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>

<P><STRONG><a name="[78]"></a>os_SysTimerEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_system.o(.text.os_SysTimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelStart
</UL>

<P><STRONG><a name="[6b]"></a>os_SysTimerSetup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_system.o(.text.os_SysTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_SysTimerSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelStart
</UL>

<P><STRONG><a name="[71]"></a>os_ThreadDelayTick</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_ThreadDelayTick
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>

<P><STRONG><a name="[69]"></a>os_ThreadDispatch</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, rtx_thread.o(.text.os_ThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_PendSV_Handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexRelease
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsSet
</UL>

<P><STRONG><a name="[68]"></a>os_ThreadListGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.os_ThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MutexOwnerRelease
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelStart
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexRelease
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[74]"></a>os_ThreadListPut</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_ThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexAcquire
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsWait
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[65]"></a>os_ThreadListRemove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.os_ThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_EventFlagsPostProcess
</UL>

<P><STRONG><a name="[7a]"></a>os_ThreadListSort</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_ThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexAcquire
</UL>

<P><STRONG><a name="[38]"></a>os_ThreadPostProcess</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, rtx_thread.o(.text.os_ThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = os_ThreadPostProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.os_svcThreadNew)
</UL>
<P><STRONG><a name="[73]"></a>os_ThreadReadyPut</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_ThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>

<P><STRONG><a name="[79]"></a>os_ThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.os_ThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[6d]"></a>os_ThreadStackCheck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.os_ThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadSetPriority
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadExit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitEnter
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadSwitch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
</UL>

<P><STRONG><a name="[6e]"></a>os_ThreadSwitch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_thread.o(.text.os_ThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_ThreadSwitch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelStart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>

<P><STRONG><a name="[6f]"></a>os_ThreadWaitEnter</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_ThreadWaitEnter &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcDelay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexAcquire
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsWait
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[66]"></a>os_ThreadWaitExit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rtx_thread.o(.text.os_ThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MutexOwnerRelease
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMutexRelease
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcEventFlagsSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_EventFlagsPostProcess
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcMessageQueuePut
</UL>

<P><STRONG><a name="[50]"></a>os_Tick_Handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_system.o(.text.os_Tick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_Tick_Handler &rArr; os_TimerTick &rArr; osMessageQueuePut &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadReadyPut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListRemove
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_TimerTick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadSwitch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDelayTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_SysTimerAckIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[72]"></a>os_TimerTick</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rtx_timer.o(.text.os_TimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_TimerTick &rArr; osMessageQueuePut &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Tick_Handler
</UL>

<P><STRONG><a name="[26]"></a>os_svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_delay.o(.text.os_svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_svcDelay &rArr; os_ThreadWaitEnter &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[27]"></a>os_svcEventFlagsNew</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rtx_evflags.o(.text.os_svcEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_svcEventFlagsNew &rArr; os_MemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
</UL>
<P><STRONG><a name="[29]"></a>os_svcEventFlagsSet</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, rtx_evflags.o(.text.os_svcEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_svcEventFlagsSet &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListRemove
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsSet)
</UL>
<P><STRONG><a name="[2a]"></a>os_svcEventFlagsWait</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, rtx_evflags.o(.text.os_svcEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_svcEventFlagsWait &rArr; os_ThreadWaitEnter &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitEnter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsWait)
</UL>
<P><STRONG><a name="[2b]"></a>os_svcKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.os_svcKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[2c]"></a>os_svcKernelInitialize</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, rtx_kernel.o(.text.os_svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = os_svcKernelInitialize &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcThreadNew
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[2d]"></a>os_svcKernelStart</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_kernel.o(.text.os_svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_svcKernelStart &rArr; os_ThreadSwitch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadSwitch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_SysTimerSetup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_SysTimerEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[2e]"></a>os_svcMessageQueuePut</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.os_svcMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_svcMessageQueuePut &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitEnter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadRegPtr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListPut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListGet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[2f]"></a>os_svcMutexAcquire</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rtx_mutex.o(.text.os_svcMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_svcMutexAcquire &rArr; os_ThreadWaitEnter &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitEnter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListSort
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[30]"></a>os_svcMutexNew</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rtx_mutex.o(.text.os_svcMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_svcMutexNew &rArr; os_MemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[31]"></a>os_svcMutexRelease</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, rtx_mutex.o(.text.os_svcMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = os_svcMutexRelease &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadWaitExit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadListGet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[32]"></a>os_svcThreadExit</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, rtx_thread.o(.text.os_svcThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_svcThreadExit &rArr; os_MutexOwnerRelease &rArr; os_ThreadWaitExit &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MutexOwnerRelease
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolFree
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[33]"></a>os_svcThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.os_svcThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[34]"></a>os_svcThreadNew</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, rtx_thread.o(.text.os_svcThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolFree
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryPoolAlloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryFree
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_MemoryAlloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadDispatch
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[35]"></a>os_svcThreadSetPriority</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, rtx_thread.o(.text.os_svcThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_svcThreadSetPriority &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSetPriority)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>DMA_DeInit</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
</UL>

<P><STRONG><a name="[b8]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
</UL>

<P><STRONG><a name="[9c]"></a>DMA_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
</UL>

<P><STRONG><a name="[9b]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f0xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpio
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpio
</UL>

<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 438 bytes, Stack size 0 bytes, i2c.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartNvicConfig
</UL>

<P><STRONG><a name="[81]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[83]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, system_stm32f0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, timer.o(i.TIM6_DAC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; osEventFlagsSet &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; osEventFlagsSet &rArr; os_PostProcess &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
</UL>

<P><STRONG><a name="[85]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
</UL>

<P><STRONG><a name="[84]"></a>USART_GetITStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart1
</UL>

<P><STRONG><a name="[86]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart1
</UL>

<P><STRONG><a name="[96]"></a>USART_ReceiverTimeOutCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiverTimeOutCmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart1
</UL>

<P><STRONG><a name="[95]"></a>USART_SetReceiverTimeOut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SetReceiverTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart1
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus_func.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHoldingRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_Error
</UL>

<P><STRONG><a name="[45]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_config.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; os_svcKernelInitialize &rArr; os_svcThreadNew &rArr; os_ThreadDispatch &rArr; os_ThreadStackCheck &rArr; os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[87]"></a>change_device_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hc0x_bluetooth.o(i.change_device_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = change_device_name &rArr; uart1TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1CheckRxBuf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_string
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>checkCrc16</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, modbus.o(i.checkCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = checkCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[8c]"></a>compare_string</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, util.o(i.compare_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_string
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
</UL>

<P><STRONG><a name="[88]"></a>copy_string</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, util.o(i.copy_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_string
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
</UL>

<P><STRONG><a name="[a5]"></a>crc16</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, modbus.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSingleCoil
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInputs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHoldingRegister
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCoils
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbReturnException
</UL>

<P><STRONG><a name="[b4]"></a>i2c_master_process</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, i2c.o(i.i2c_master_process))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_HDC1080_configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_HDC1080
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[8d]"></a>initGpio</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, gpio.o(i.initGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initGpio &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>initI2C</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, i2c.o(i.initI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initI2C &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>initTimers</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, timer.o(i.initTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initTimers &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>initUart1</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, uart.o(i.initUart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = initUart1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetReceiverTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverTimeOutCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>initUart2</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, uart.o(i.initUart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = initUart2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetReceiverTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverTimeOutCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>initUartDma</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, uart.o(i.initUartDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initUartDma &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>init_HDC1080</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hdc1080.o(i.init_HDC1080))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_HDC1080 &rArr; write_HDC1080_configuration &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_HDC1080_configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; initUart2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartNvicConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setParameters
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUartDma
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUart1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimers
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpio
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a4]"></a>mbReturnException</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, modbus.o(i.mbReturnException))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbReturnException &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[a6]"></a>modbusRTU</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, modbus.o(i.modbusRTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modbusRTU &rArr; writeSingleCoil &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSingleCoil
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInputs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHoldingRegister
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCoils
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbReturnException
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCrc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wordEndianer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Uart1
</UL>

<P><STRONG><a name="[6a]"></a>os_Error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.os_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_Error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ThreadStackCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_PostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_TimerTick
</UL>

<P><STRONG><a name="[36]"></a>os_IdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.os_IdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.os_svcKernelInitialize)
</UL>
<P><STRONG><a name="[a9]"></a>readCoils</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, modbus_func.o(i.readCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readCoils &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGpioOutputs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[af]"></a>readGpioInputs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.readGpioInputs))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInputs
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_StepperMotor
</UL>

<P><STRONG><a name="[ae]"></a>readGpioOutputs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.readGpioOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readCoils
</UL>

<P><STRONG><a name="[ab]"></a>readHoldingRegister</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, modbus_func.o(i.readHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readHoldingRegister &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[aa]"></a>readInputs</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, modbus_func.o(i.readInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readInputs &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGpioInputs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[3d]"></a>rwDummyFunc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modbus_func.o(i.rwDummyFunc))
<BR>[Address Reference Count : 1]<UL><LI> modbus_func.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>setGpioOutputs</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(i.setGpioOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSingleCoil
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_StepperMotor
</UL>

<P><STRONG><a name="[a0]"></a>setParameters</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pub_var.o(i.setParameters))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>task_HDC1080</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, hdc1080.o(i.task_HDC1080))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_HDC1080 &rArr; init_HDC1080 &rArr; write_HDC1080_configuration &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_HDC1080
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_HDC1080
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wordEndianer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>task_Led</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.task_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_Led &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>task_StepperMotor</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, stepper_motor.o(i.task_StepperMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_StepperMotor &rArr; osEventFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGpioOutputs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readGpioInputs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3b]"></a>task_Uart1</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, uart.o(i.task_Uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task_Uart1 &rArr; modbusRTU &rArr; writeSingleCoil &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1TxCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b2]"></a>trig_HDC1080</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, hdc1080.o(i.trig_HDC1080))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trig_HDC1080 &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[8b]"></a>uart1CheckRxBuf</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart.o(i.uart1CheckRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
</UL>

<P><STRONG><a name="[89]"></a>uart1TxCmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(i.uart1TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Uart1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_device_name
</UL>

<P><STRONG><a name="[a1]"></a>uartNvicConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.uartNvicConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartNvicConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>wordEndianer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, util.o(i.wordEndianer))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSingleCoil
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_HDC1080
</UL>

<P><STRONG><a name="[ac]"></a>writeSingleCoil</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, modbus_func.o(i.writeSingleCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeSingleCoil &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGpioOutputs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wordEndianer
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbusRTU
</UL>

<P><STRONG><a name="[9f]"></a>write_HDC1080_configuration</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hdc1080.o(i.write_HDC1080_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_HDC1080_configuration &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_HDC1080
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[91]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initI2C
</UL>

<P><STRONG><a name="[93]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimers
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
